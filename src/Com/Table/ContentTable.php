<?php

namespace Nemundo\Content\Com\Table;

use Nemundo\Admin\Com\Table\AdminClickableTable;
use Nemundo\Admin\Com\Table\AdminTable;
use Nemundo\Com\TableBuilder\TableHeader;
use Nemundo\Com\TableBuilder\TableRow;
use Nemundo\Content\Data\Content\ContentPaginationReader;
use Nemundo\Content\Parameter\ContentParameter;
use Nemundo\Content\Site\ContentDeleteSite;
use Nemundo\Content\Site\ContentEditSite;
use Nemundo\Content\Site\ContentViewSite;
use Nemundo\Db\Sql\Order\SortOrder;
use Nemundo\Package\Bootstrap\Table\BootstrapClickableTableRow;

class ContentTable extends AdminTable
{

    public function getContent()
    {

        $contentReader=new ContentPaginationReader();
        $contentReader->model->loadContentType();
        //$contentReader->filter = $filter;
        $contentReader->addOrder($contentReader->model->id, SortOrder::DESCENDING);
        $contentReader->paginationLimit = 50;

        //$table = new AdminClickableTable($this);

        $header = new TableHeader($this);
        //$header->addText($contentReader->model->contentType->application->label);
        //$header->addText($contentReader->model->id->label);
        $header->addText('Content Id');
        $header->addText($contentReader->model->dataId->label);
        $header->addText('Content Type');
        $header->addText('Content Type Id');
        $header->addText('Subject (Data)');
        //$header->addText('Class');
        $header->addText('Subject (Type)');
        //$header->addText('Date/Time');
        //$header->addText('User');
        $header->addEmpty();
        $header->addEmpty();

        foreach ($contentReader->getData() as $contentRow) {

            $contentType = $contentRow->getContent();

            $row = new TableRow($this);
            //$row->addText($contentRow->contentType->application->application);

            $row->addText($contentRow->id);
            $row->addText($contentRow->dataId);
            $row->addText($contentRow->contentType->contentType);
            $row->addText($contentRow->contentTypeId);
            $row->addText($contentRow->subject);

            if ($contentType !== null) {
                //$row->addText($contentType->getClassName());
                $row->addText($contentType->getSubject());
            }


            //$row->addText($contentRow->dateTime->getShortDateTimeWithSecondLeadingZeroFormat());
            //$row->addText($contentRow->user->login);

            /*
            if ($contentType->isObjectOfTrait(JsonContentTrait::class)) {
                $site = clone(ContentJsonSite::$site);
                $site->addParameter(new ContentParameter($contentRow->id));
                $row->addSite($site);
            } else {
                $row->addEmpty();
            }*/


            /*$site = clone(JsonExportSite::$site);
            $site->addParameter(new ContentParameter($contentRow->id));
            $row->addSite($site);*/



            /*
            $site = clone(ContentEditSite::$site);
            $site->addParameter(new ContentParameter($contentRow->id));
            $row->addIconSite($site);

            $site = clone(ContentDeleteSite::$site);
            $site->addParameter(new ContentParameter($contentRow->id));
            $row->addIconSite($site);

            $site = clone(ContentViewSite::$site);  // ContentItemSite::$site);
            $site->addParameter(new ContentParameter($contentRow->id));
            $row->addClickableSite($site);*/


        }


        return parent::getContent(); // TODO: Change the autogenerated stub
    }

}