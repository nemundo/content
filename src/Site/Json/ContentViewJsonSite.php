<?phpnamespace Nemundo\Content\Site\Json;use Nemundo\Content\Parameter\ContentParameter;use Nemundo\Content\Parameter\ContentTypeParameter;use Nemundo\Content\Parameter\DataIdParameter;use Nemundo\Content\Site\ContentViewSite;use Nemundo\Web\Site\AbstractJsonSite;class ContentViewJsonSite extends AbstractJsonSite{    /**     * @var ContentViewJsonSite     */    public static $site;    protected function loadSite()    {        $this->title = 'Json Export';        $this->url = 'content-view-json';        ContentViewJsonSite::$site = $this;    }    protected function loadJson()    {        if ((new ContentParameter())->hasValue()) {            $content = (new ContentParameter())->getContent(false);            $html = $content->getDefaultView()->getBodyContent();            $data = [];            $data['subject'] = $content->getSubject();            $data['content_id'] = $content->getContentId();            $data['html'] = $html;            $site = clone(ContentViewSite::$site);            $site->addParameter(new ContentParameter());            $data['url'] = $site->getUrlWithDomain();            $item = [];            $item['content'] = $data;            $this->setJsonData($item);        }        $dataIdParameter = new DataIdParameter();        if ((new DataIdParameter())->hasValue()) {            $contentType = (new ContentTypeParameter())->getContentType()->fromDataId($dataIdParameter->getValue());            $this->setJsonData($contentType->getJsonData());        }    }    /*    public function loadContent()    {        $contentType = (new ContentParameter())->getContent(false);        $response = new HttpResponse();        $response->contentType = ContentType::JSON;        $response->attachmentFilename = 'data.json';        $response->content = $contentType->getJson();        $response->sendResponse();    }*/}