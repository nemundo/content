<?phpnamespace Nemundo\Content\Page;use Nemundo\Admin\Com\Form\AdminSearchForm;use Nemundo\Admin\Com\Layout\AdminFlexboxLayout;use Nemundo\Admin\Com\Table\AdminTable;use Nemundo\Admin\Com\Table\AdminTableHeader;use Nemundo\Admin\Com\Table\Row\AdminTableRow;use Nemundo\App\Application\Com\ListBox\ApplicationListBox;use Nemundo\Com\FormBuilder\SearchForm;use Nemundo\Com\Html\Listing\UnorderedList;use Nemundo\Com\Template\AbstractTemplateDocument;use Nemundo\Content\Com\Tab\ContentTab;use Nemundo\Content\Data\Content\ContentCount;use Nemundo\Content\Data\ContentType\ContentTypeReader;use Nemundo\Content\Data\ContentView\ContentViewReader;use Nemundo\Content\Template\ContentAdminTemplate;use Nemundo\Core\Type\Number\Number;use Nemundo\Package\Bootstrap\Layout\BootstrapTwoColumnLayout;use Nemundo\Package\Bootstrap\Layout\Grid\BootstrapRow;class ContentTypePage extends AbstractTemplateDocument{    public function getContent()    {        $layout = new AdminFlexboxLayout($this);        new ContentTab($layout);        $form = new AdminSearchForm($layout);        $application = new ApplicationListBox($form);        $application->submitOnChange = true;        $application->searchMode = true;        $contentTypeReader = new ContentTypeReader();        $contentTypeReader->model->loadApplication();        if ($application->hasValue()) {            $contentTypeReader->filter->andEqual($contentTypeReader->model->applicationId, $application->getValue());         /*   $btn = new AdminSiteButton($layout->col1);            $btn->site = clone(ApplicationJsonSite::$site);            $btn->site->addParameter(new ApplicationParameter());*/        }        $contentTypeReader->addOrder($contentTypeReader->model->contentType);        $table = new AdminTable($layout);        $header = new AdminTableHeader($table);        $header->addText('Type');        $header->addText('Class');        $header->addText('Type Id');        $header->addText('View');        $header->addText($contentTypeReader->model->application->label);        $header->addText('Item Count');        $header->addEmpty();        foreach ($contentTypeReader->getData() as $contentTypeRow) {            //$contentType = $contentTypeRow->getContentType();            $row = new AdminTableRow($table);  // new BootstrapClickableTableRow($table);            $row->addText($contentTypeRow->contentType);            $row->addText($contentTypeRow->phpClass);            $row->addText($contentTypeRow->id);            $row->addText($contentTypeRow->application->application);            /*$ul= new UnorderedList($row);            $viewReader = new ContentViewReader();            $viewReader->filter->andEqual($viewReader->model->contentTypeId, $contentTypeRow->id);            foreach ($viewReader->getData() as $viewRow) {                $text = $viewRow->viewName. ' - '.$viewRow->viewClass;                if ($viewRow->defaultView) {                    $text.=' (default)';                }                $ul->addText($text);            }            $row->addText($contentTypeRow->application->application);            $count = new ContentCount();            $count->filter->andEqual($count->model->contentTypeId, $contentTypeRow->id);            $row->addText((new Number($count->getCount()))->getFormatNumber());*/            /*            if ($contentType->isObjectOfTrait(JsonContentTrait::class)) {                $site = clone(ContentTypeJsonSite::$site);                $site->addParameter(new ContentTypeParameter($contentTypeRow->id));                $row->addSite($site);            }*///            $row->addClickableSite($site);            /*            $site = clone(ContentTypeSite::$site);            $site->addParameter(new ApplicationParameter());            $site->addParameter(new ContentTypeParameter($contentTypeRow->id));            $row->addClickableSite($site);*/        }        /*        $parameter = new ContentTypeParameter();        if ($parameter->hasValue()) {            $contentType = $parameter->getContentType();            $btn=new AdminSiteButton($layout->col2);            $btn->site=clone(ContentTypeJsonSite::$site);            $btn->site->addParameter($parameter);            $btn=new AdminSiteButton($layout->col2);            $btn->site=clone(ContentTypeRemoveSite::$site);            $btn->site->addParameter($parameter);            if ($contentType->hasAdmin()) {                $contentType->getAdmin($layout->col2);            }        }*/        return parent::getContent();    }}