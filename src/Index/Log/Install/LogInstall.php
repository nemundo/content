<?phpnamespace Nemundo\Content\Index\Log\Install;use Nemundo\App\Application\Type\Install\AbstractInstall;use Nemundo\App\WebService\Setup\ServiceRequestSetup;use Nemundo\Content\Index\Log\Application\ContentLogApplication;use Nemundo\Content\Index\Log\Data\LogModelCollection;use Nemundo\Content\Index\Log\Data\Status\Status;use Nemundo\Content\Index\Log\Service\LogService;use Nemundo\Content\Index\Log\Status\AbstractStatus;use Nemundo\Content\Index\Log\Status\ActiveStatus;use Nemundo\Content\Index\Log\Status\DeleteStatus;use Nemundo\Content\Index\Log\Status\DraftStatus;use Nemundo\Model\Setup\ModelCollectionSetup;class LogInstall extends AbstractInstall{    public function install()    {        /*(new ApplicationSetup())            ->addApplication(new LogApplication());*/        (new ModelCollectionSetup())            ->addCollection(new LogModelCollection());        /*(new ActionSetup())            ->addContentAction(new LogIndexContentAction());*/        (new ServiceRequestSetup(new ContentLogApplication()))            ->addService(new LogService());        /*        (new ContentTypeSetup())            ->addContentType(new CreateLogContentType())            ->addContentType(new ModifiedLogContentType())            ->addContentType(new DeleteLogContentType());*/        $this            ->addStatus(new DraftStatus())            ->addStatus(new ActiveStatus())            ->addStatus(new DeleteStatus());    }    protected function addStatus(AbstractStatus $status)    {        $data = new Status();        $data->id = $status->id;        $data->status = $status->status;        $data->save();        return $this;    }}