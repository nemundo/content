<?phpnamespace Nemundo\Content\Index\Geo\Scheduler;use Nemundo\App\Scheduler\Job\AbstractScheduler;use Nemundo\Content\Index\Geo\Data\Distance\Distance;use Nemundo\Content\Index\Geo\Data\Distance\DistanceBulk;use Nemundo\Content\Index\Geo\Data\Distance\DistanceDelete;use Nemundo\Content\Index\Geo\Data\GeoIndex\GeoIndexReader;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Geo\Distance\GeoCoordinateDistance;use Nemundo\Core\System\PhpConfig;use Nemundo\Model\Filter\GeoCoordinateSquareFilter;class GeoDistanceScheduler extends AbstractScheduler{    protected function loadScheduler()    {        $this->consoleScript = true;        $this->scriptName = 'geoindex-distance';    }    public function run()    {        (new PhpConfig())->setUnlimitedMemoryLimit();        (new DistanceDelete())->delete();        $data = new DistanceBulk();        $readerFrom = new GeoIndexReader();        foreach ($readerFrom->getData() as $geoIndexRowFrom) {            $readerTo = new GeoIndexReader();            $readerTo->filter->andNotEqual($readerTo->model->contentId, $geoIndexRowFrom->contentId);            $filter = new GeoCoordinateSquareFilter();            $filter->coordinateType = $readerFrom->model->coordinate;            foreach ($readerTo->getData() as $geoIndexRowTo) {                $distance = new GeoCoordinateDistance();                $distance->geoCoordinateFrom = $geoIndexRowFrom->coordinate;                $distance->geoCoordinateTo = $geoIndexRowTo->coordinate;                $data->contentFromId = $geoIndexRowFrom->contentId;                $data->contentToId = $geoIndexRowTo->contentId;                $data->distance = $distance->getDistanceInMetre();                $data->save();            }        }        $data->saveBulk();    }}