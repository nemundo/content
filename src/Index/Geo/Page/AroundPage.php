<?phpnamespace Nemundo\Content\Index\Geo\Page;use Nemundo\Admin\Com\Button\AdminIconSiteButton;use Nemundo\Admin\Com\Button\AdminSearchButton;use Nemundo\Admin\Com\Form\AdminSearchForm;use Nemundo\Admin\Com\Form\Geo\AdminGeoCoordinateTextBox;use Nemundo\Admin\Com\Layout\AdminFlexboxLayout;use Nemundo\Admin\Com\Pagination\AdminPagination;use Nemundo\Admin\Com\Table\AdminTable;use Nemundo\Admin\Com\Table\Row\AdminTableRow;use Nemundo\Admin\Parameter\PageParameter;use Nemundo\Com\TableBuilder\TableHeader;use Nemundo\Com\Template\AbstractTemplateDocument;use Nemundo\Content\Index\Geo\Com\ListBox\DistanceListBox;use Nemundo\Content\Index\Geo\Com\ListBox\GeoContentTypeListBox;use Nemundo\Content\Index\Geo\Com\Tab\GeoTab;use Nemundo\Content\Index\Geo\Data\GeoIndex\GeoIndexPaginationReader;use Nemundo\Content\Index\Geo\Parameter\DistanceParameter;use Nemundo\Content\Index\Geo\Parameter\GeoCoordinateParameter;use Nemundo\Content\Index\Geo\Parameter\LatitudeParameter;use Nemundo\Content\Index\Geo\Parameter\LongitudeParameter;use Nemundo\Content\Index\Geo\Site\Kml\AroundKmlSite;use Nemundo\Core\Geo\Distance\GeoCoordinateDistance;use Nemundo\Core\Log\LogMessage;use Nemundo\Core\Type\Geo\GeoCoordinate;use Nemundo\Html\Paragraph\Paragraph;use Nemundo\Model\Filter\GeoCoordinateSquareFilter;class AroundPage extends AbstractTemplateDocument{    public function getContent()    {        $layout = new AdminFlexboxLayout($this);        new GeoTab($layout);        $form = new AdminSearchForm($layout);        $geoContentType = new GeoContentTypeListBox($form);        $geoContentType->submitOnChange = true;        $geoContentType->searchMode = true;        $distance = new DistanceListBox($form);        $distance->emptyValueAsDefault = false;        $distance->searchMode = true;        $distance->submitOnChange = true;        $geoCoordinateTextBox = new AdminGeoCoordinateTextBox($form);        $geoCoordinateTextBox->label = 'Geo Coordinate';        $geoCoordinateTextBox->searchMode = true;        //$geoCoordinateTextBox->value = '46.8735590368648, 8.635687309394777';        //$geoCoordinateTextBox->name = (new GeoCoordinateParameter())->getParameterName();        //$geoCoordinate = new GeoCoordinate();        //$geoCoordinate->        //$geoCoordinate->fromText('46.8735590368648, 8.635687309394777');        //$geoCoordinateTextBox->setGeoCoordinate($geoCoordinate);        new AdminSearchButton($form);        if ($geoCoordinateTextBox->hasValue()) {            $geoCoordinate = $geoCoordinateTextBox->getGeoCoordinate();            //$geoCoordinate = new GeoCoordinate();            //$geoCoordinate->fromText('46.8735590368648, 8.635687309394777');            //$geoCoordinate->fromText('46.90687596057738, 8.396299802775115');            $btn = new AdminIconSiteButton($layout);            $btn->site = clone(AroundKmlSite::$site);            $btn->site->addParameter(new DistanceParameter());            $btn->site->addParameter(new LatitudeParameter($geoCoordinate->latitude));            $btn->site->addParameter(new LongitudeParameter($geoCoordinate->longitude));            $p = new Paragraph($layout);            $table = new AdminTable($layout);            $header = new TableHeader($table);            $header->addText('Content Type');            $header->addText('Place');            $header->addText('Coordinate');            $header->addText('Distance');            $geoReader = new GeoIndexPaginationReader();            $geoReader->model->loadContent();            $geoReader->model->content->loadContentType();            if ($geoContentType->hasValue()) {                    $geoReader->filter->andEqual($geoReader->model->content->contentTypeId, $geoContentType->getValue());            }            $filter = new GeoCoordinateSquareFilter();            $filter->coordinateCenter = $geoCoordinateTextBox->getGeoCoordinate();            $filter->coordinateType = $geoReader->model->coordinate;            if ($distance->hasValue()) {                $filter->distanceInKilometres = $distance->getValue();            }            $geoReader->filter->andFilter($filter);            $geoReader->currentPage = (new PageParameter())->getValue();            $p->content = $geoReader->getFormatTotalCount() . ' item found';            /*            $contentTypeParameter = new ContentTypeParameter();            $contentTypeParameter->contentTypeCheck = false;            if ($contentTypeParameter->hasValue()) {                $geoReader->filter->andEqual($geoReader->model->content->contentTypeId, $contentTypeParameter->getValue());            }            $geoReader->addOrder($geoReader->model->place);*/            foreach ($geoReader->getData() as $geoRow) {                $contentType = $geoRow->content->getContent();                if ($contentType !== null) {                    $row = new AdminTableRow($table);                    /*if ($geoRow->id == (new GeoIndexParameter())->getValue()) {                        $row->setActiveRow();                    }*/                    $row->addText($contentType->getTypeLabel());                    $row->addText($geoRow->place);                    $row->addText($geoRow->coordinate->getText());                    $geoDistance = new GeoCoordinateDistance();                    $geoDistance->geoCoordinateFrom = $geoCoordinateTextBox->getGeoCoordinate();                    $geoDistance->geoCoordinateTo = $geoRow->coordinate;                    $row->addText($geoDistance->getDistanceText());                    /*if ($contentType->hasKmlMarker()) {                        $site = clone(GeoContentKmlSite::$site);                        $site->addParameter(new GeoIndexParameter($geoRow->id));                        $row->addSite($site);                    } else {                        $row->addEmpty();                    }*/                    /*                    $site = clone(GeoIndexSite::$site);                    $site->addParameter(new ContentParameter($contentType->getContentId()));                    $site->addParameter(new ContentTypeParameter());                    $site->addParameter(new PageParameter());                    $site->addParameter(new GeoIndexParameter($geoRow->id));                    $row->addClickableSite($site);*/                } else {                    (new LogMessage())->writeError('No Content Type');                }            }            $pagination = new AdminPagination($layout);            $pagination->paginationReader = $geoReader;        } /*else {            $geoCoordinate = new GeoCoordinate();            $geoCoordinate->fromText('46.8735590368648, 8.635687309394777');            $geoCoordinateTextBox->setGeoCoordinate($geoCoordinate);        }*/        return parent::getContent();    }}