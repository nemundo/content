<?php

namespace Nemundo\Content\Index\Workflow\Type\Status;

use Nemundo\Content\Index\Workflow\Action\WorkflowLogAction;
use Nemundo\Content\Index\Workflow\Data\Workflow\WorkflowReader;
use Nemundo\Content\Index\Workflow\Data\Workflow\WorkflowUpdate;
use Nemundo\Content\Type\AbstractContentBuilder;
use Nemundo\User\Usergroup\AbstractUsergroup;


abstract class AbstractWorkflowStatusBuilder extends AbstractContentBuilder
{

    /**
     * @var AbstractWorkflowStatusType
     */
    public $contentType;

    //public $processId;

    public $workflowId;


    public function buildContent()
    {
        $id = parent::buildContent(); // TODO: Change the autogenerated stub

        $item = $this->contentType->getItem($this->getDataId());

        //new WorkflowLogAction())->onAction($item);
        $action = new WorkflowLogAction();
        $action->workflowId = $this->workflowId;
        $action->onAction($item);


        if ($this->contentType->changeStatus) {

            $update = new WorkflowUpdate();
            $update->statusId = $this->contentType->typeId;
            $update->updateById($this->workflowId);

        }


        return $id;

    }


    public function changeUsergroupAssignment(AbstractUsergroup $usergroup)
    {

        $update = new WorkflowUpdate();
        $update->statusId = $this->contentType->typeId;
        $update->updateById($this->workflowId);


    }


    public function getDataIdFromWorkflowId()
    {

        $workflowReader = new WorkflowReader();
        $workflowReader->model->loadContent();
        $workflowRow = $workflowReader->getRowById($this->workflowId);
        $dataId = $workflowRow->content->dataId;

        return $dataId;

    }


}