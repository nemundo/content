<?phpnamespace Nemundo\Content\Action\Setup;use Nemundo\Content\Action\AbstractContentAction;use Nemundo\Content\Data\ContentAction\ContentAction;use Nemundo\Content\Data\ContentAction\ContentActionCount;use Nemundo\Content\Data\ContentAction\ContentActionDelete;use Nemundo\Content\Data\ContentAction\ContentActionUpdate;use Nemundo\Core\Base\AbstractBase;class ActionSetup extends AbstractBase{    public function addContentAction(AbstractContentAction $contentAction)    {        $data = new ContentAction();        $data->updateOnDuplicate=true;        //$data->ignoreIfExists = true;        $data->id = $contentAction->actionId;        $data->action=$contentAction->actionLabel;        $data->phpClass=$contentAction->getClassName();        $data->menuActive=true;        $data->setupStatus=true;        $data->save();        //parent::addContentType($contentAction);       /* $count = new ContentActionCount();        $count->filter->andEqual($count->model->contentTypeId, $contentAction->typeId);        if ($count->getCount() == 0) {            /*            $data = new ContentAction();            //$data->ignoreIfExists = true;            $data->contentTypeId = $contentAction->typeId;            $data->save();*/        //}        /*else {            $update = new ContentActionUpdate();            //$data->ignoreIfExists = true;            $data->contentTypeId = $contentAction->typeId;            $data->save();        }*/        return $this;    }    public function removeContentAction(AbstractContentAction $contentAction)    {//        $this->removeType($contentAction);        //parent::removeTContentType($contentAction);        (new ContentActionDelete())->deleteById($contentAction->actionId);        /*$delete=new ContentActionDelete();        $delete->filter->andEqual($delete->model->idcontentTypeId, $contentAction->typeId);        $delete->delete();*/        return $this;    }}