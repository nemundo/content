<?phpnamespace Nemundo\Content\View;use Nemundo\Admin\ActionSite\ActiveActionSite;use Nemundo\Admin\ActionSite\DeleteActionSite;use Nemundo\Admin\ActionSite\EditActionSite;use Nemundo\Admin\ActionSite\InactiveActionSite;use Nemundo\Admin\ActionSite\NewActionSite;use Nemundo\Admin\ActionSite\ViewActionSite;use Nemundo\Admin\Com\Button\AdminIconSiteButton;use Nemundo\Admin\Com\Button\AdminSiteButton;use Nemundo\Admin\Com\Card\AdminCard;use Nemundo\Admin\Com\Hyperlink\AdminSiteHyperlinkContainer;use Nemundo\Admin\Com\Icon\AdminIcon;use Nemundo\Admin\Com\Title\AdminTitle;use Nemundo\Com\Html\Hyperlink\SiteHyperlink;use Nemundo\Content\Parameter\ContentTypeParameter;use Nemundo\Content\Parameter\DataIdParameter;use Nemundo\Content\Type\AbstractContentType;use Nemundo\Core\Http\Url\UrlReferer;use Nemundo\Core\Language\LanguageCode;use Nemundo\Web\Action\Com\AbstractActionContainer;use Nemundo\Web\Action\Site\ActionSite;abstract class AbstractContentAdmin extends AbstractActionContainer{    /**     * @var AbstractContentType     */    public $contentType;    /**     * @var bool     */    public $showNew = true;    /**     * @var ActionSite     */    protected $index;    /**     * @var NewActionSite     */    protected $new;    /**     * @var EditActionSite     */    protected $edit;    /**     * @var DeleteActionSite     */    protected $delete;    /**     * @var ActiveActionSite     */    protected $active;    /**     * @var InactiveActionSite     */    protected $inactive;    /**     * @var ViewActionSite     */    protected $log;    /**     * @var AdminSiteButton     */    protected $newButton;    /**     * @var bool     */    protected $showTitle = true;    /**     * @var bool     */    protected $showBackButton = true;    /**     * @var SiteHyperlink     */    protected $backButton;    protected function loadActionSite()    {        $this->tagName = 'div';        $this->addCssClass('admin-default-layout');        if ($this->showTitle) {            $subtitle = new AdminTitle($this);            $subtitle->content = $this->contentType->typeLabel;        }        $this->index = new ActionSite($this);        $this->index->title = 'Home';        $this->backButton = new AdminSiteHyperlinkContainer($this);        $this->backButton->site = $this->index;        $icon = new AdminIcon($this->backButton);        $icon->icon = 'arrow-left';        $this->index->onAction = function () {            $this->backButton->visible = false;            if ($this->showNew) {                if ($this->contentType->hasForm()) {                    $this->newButton = new AdminIconSiteButton($this);                    $this->newButton->site = clone($this->new);                }            }            $this->onIndex();        };        if ($this->showNew) {            $this->new = new NewActionSite($this);            $this->new->onAction = function () {                $this->onNew();            };        }        $this->edit = new EditActionSite($this);        $this->edit->onAction = function () {            $dataId = (new DataIdParameter())->getValue();            $this->onEdit($dataId);        };        $this->delete = new DeleteActionSite($this);        $this->delete->onAction = function () {            $dataId = (new DataIdParameter())->getValue();            $this->onDelete($dataId);            (new UrlReferer())->redirect();        };        $this->active = new ActiveActionSite($this);        $this->active->onAction = function () {            $dataId = (new DataIdParameter())->getValue();            $this->onActive($dataId);            (new UrlReferer())->redirect();        };        $this->inactive = new InactiveActionSite($this);        $this->inactive->onAction = function () {            $dataId = (new DataIdParameter())->getValue();            $this->onInactive($dataId);            (new UrlReferer())->redirect();        };        $this->log = new ViewActionSite($this);        $this->log->onAction = function () {            $dataId = (new DataIdParameter())->getValue();            $this->onView($dataId);        };    }// onIndex// onDefault// onStart    protected function onIndex()    {        if ($this->contentType->hasList()) {            $list = $this->contentType->getViewList();            //$form->redirectSite = $this->index;        }    }    protected function onNew()    {        foreach ($this->contentType->getFormList() as $form) {            $card = new AdminCard($this);            $card->cardTitle = $form->formName;            $card->addContainer($form);            $form->redirectSite = clone($this->index);            $form->redirectSite->addParameter(new ContentTypeParameter());        }    }    protected function onEdit($dataId)    {        $form = $this->contentType->getDefaultForm($this);        $form->dataId = $dataId;        $form->redirectSite = $this->index;    }    protected function onView($dataId)    {        $item = $this->contentType->getDefaultView($this);        $item->dataId = $dataId;    }    protected function onDelete($dataId)    {        //$this->contentType->getItem($dataId)->deleteItem();        if ($this->contentType->hasRemove()) {            $remove = $this->contentType->getRemove($dataId);            $remove->removeItem();        }    }    protected function onActive($dataId)    {    }    protected function onInactive($dataId)    {    }    protected function getEditSite($dataId)    {        $site = clone($this->edit);        $site->addParameter(new DataIdParameter($dataId));        return $site;    }    protected function getActiveSite($dataId)    {        $site = clone($this->active);        $site->addParameter(new DataIdParameter($dataId));        return $site;    }    protected function getInactiveSite($dataId)    {        $site = clone($this->inactive);        $site->addParameter(new DataIdParameter($dataId));        return $site;    }    protected function getViewSite($dataId)    {        $site = clone($this->log);        $site->addParameter(new DataIdParameter($dataId));        return $site;    }    protected function getDeleteSite($dataId)    {        $site = clone($this->delete);        $site->addParameter(new DataIdParameter($dataId));        return $site;    }}