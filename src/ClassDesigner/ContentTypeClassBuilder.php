<?phpnamespace Nemundo\Content\ClassDesigner;use Nemundo\App\ClassDesigner\Builder\AbstractClassBuilder;use Nemundo\Content\Type\AbstractContentBuilder;use Nemundo\Content\Type\AbstractContentItem;use Nemundo\Content\Type\AbstractContentRemove;use Nemundo\Core\Random\UniqueId;use Nemundo\Dev\Code\PhpClass;use Nemundo\Dev\Code\PhpFunction;use Nemundo\Dev\Code\PhpVariable;use Nemundo\Dev\Code\PhpVisibility;class ContentTypeClassBuilder extends AbstractClassBuilder{    public function buildClass()    {        //$parameterName = (new Text($this->className))->changeToLowercase()->getValue();        $namespace = $this->namespace . '\Content\\' . $this->className;        $typeClassName = $this->className . 'Type';        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $typeClassName;        $phpClass->extendsFromClass = 'AbstractContentType';        $phpClass->namespace = $namespace;        $phpClass->addUseClass('Nemundo\Content\Type\AbstractContentType');        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'loadContentType()';        $function->add('$this->typeLabel = \'' . $this->className . '\';');        $function->add('$this->typeId = \'' . (new UniqueId())->getUniqueId() . '\';');        $function->add('$this->formClassList[] = ' . $this->className . 'Form::class;');        $function->add('$this->viewClassList[] = ' . $this->className . 'View::class;');        $function->add('$this->itemClass = ' . $this->className . 'Item::class;');        $phpClass->saveFile();        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $this->className . 'Item';        $phpClass->extendsFromClass = 'AbstractContentItem';        $phpClass->namespace = $namespace;        $phpClass->addUseClass(AbstractContentItem::class);        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'loadItem()';        $function->add('$this->contentType = new ' . $this->className . 'Type();');        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'onDataRow()';        $function = new PhpFunction($phpClass);        $function->functionName = 'getDataRow()';        $function->returnDataType = '\Nemundo\Model\Row\AbstractModelDataRow';        $function->add('return parent::getDataRow(); ');        $phpClass->saveFile();        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $this->className . 'Builder';        $phpClass->extendsFromClass = 'AbstractContentBuilder';        $phpClass->namespace = $namespace;        $phpClass->addUseClass(AbstractContentBuilder::class);        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'loadBuilder()';        $function->add('$this->contentType = new ' . $this->className . 'Type();');        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'onCreate()';        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'onUpdate()';        $phpClass->saveFile();        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $this->className . 'Remove';        $phpClass->extendsFromClass = 'AbstractContentRemove';        $phpClass->namespace = $namespace;        $phpClass->addUseClass(AbstractContentRemove::class);        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'loadRemove()';        $function->add('$this->contentType = new ' . $this->className . 'Type();');        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'onDelete()';        $phpClass->saveFile();        $contentTypeVariable = new PhpVariable();        $contentTypeVariable->variableName = 'contentType';        $contentTypeVariable->dataType = $typeClassName;        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $this->className . 'Form';        $phpClass->extendsFromClass = 'AbstractContentForm';        $phpClass->namespace = $namespace;        $phpClass->addUseClass('Nemundo\Content\Form\AbstractContentForm');        $function = new PhpFunction($phpClass);        $function->functionName = 'getContent()';        $function->add('return parent::getContent();');        $function = new PhpFunction($phpClass);        $function->functionName = 'onSave()';        $function->visibility = PhpVisibility::ProtectedVariable;        $phpClass->saveFile();        $phpClass = new PhpClass();        $phpClass->project = $this->project;        $phpClass->className = $this->className . 'View';        $phpClass->extendsFromClass = 'AbstractContentView';        $phpClass->namespace = $namespace;        $phpClass->addUseClass('Nemundo\Content\View\AbstractContentView');        $function = new PhpFunction($phpClass);        $function->visibility = PhpVisibility::ProtectedVariable;        $function->functionName = 'loadView()';        $function->add('$this->viewName=\'default\';');        $function->add('$this->viewId = \'' . (new UniqueId())->getUniqueId() . '\';');        $function->add('$this->defaultView = true;');        $function = new PhpFunction($phpClass);        $function->functionName = 'getContent()';        $function->add('return parent::getContent();');        $phpClass->saveFile();    }}