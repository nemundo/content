<?phpnamespace Nemundo\Content\Type;use Nemundo\Content\Index\Download\DownloadIndexTrait;use Nemundo\Content\Index\File\ImageIndexTrait;use Nemundo\Content\View\AbstractContentAdmin;use Nemundo\Content\View\AbstractContentListing;use Nemundo\Core\Base\AbstractBaseClass;use Nemundo\Core\Debug\Debug;use Nemundo\Core\Language\Translation;use Nemundo\Core\Log\LogMessage;use Nemundo\Html\Container\AbstractContainer;abstract class AbstractContentType extends AbstractBaseClass{    //use ContentIndexTrait;    //use JsonContentTrait;    use FormTrait;    use FormPartTrait;    use ViewTrait;    /**     * @var string     */    public $typeId;    /**     * @var string|string[]     */    public $typeLabel;    /**     * @var string     */    protected $itemClass;    /**     * @var string     */    protected $listingClass;    /**     * @var string     */    protected $adminClass;    /**     * @var string     */    protected $removeClass;    abstract protected function loadContentType();    public function __construct()    {        $this->loadContentType();    }    // getLabel    public function getTypeLabel()    {        $contentLabel = (new Translation())->getText($this->typeLabel);        return $contentLabel;  // $this->typeLabel;    }    // hasListing    public function hasList()    {        $value = false;        if ($this->listingClass !== null) {            $value = true;        }        return $value;    }    public function getItem($dataId)    {        if ($this->itemClass === null) {            (new Debug())->write('No Item Class. ContentTyp Class: '.$this->getClassName());            exit;        }        /** @var AbstractContentItem|ImageIndexTrait|DownloadIndexTrait $item */        $item = new $this->itemClass($dataId);        return $item;    }    public function getListing(AbstractContainer $parent)    {        /** @var AbstractContentListing $list */        $list = new $this->listingClass($parent);        $list->contentType = $this;        return $list;    }    public function hasAdmin()    {        return $this->hasProperty($this->adminClass);    }    public function getAdmin(AbstractContainer $parent)    {        $admin = null;        if ($this->hasAdmin()) {            /** @var AbstractContentAdmin $admin */            $admin = new $this->adminClass($parent);            $admin->contentType = $this;        } else {            (new LogMessage())->writeError('No Admin Class. Class: ' . $this->getClassName());        }        return $admin;    }    public function hasRemove()    {        return $this->hasProperty($this->removeClass);    }    public function getRemove($dataId)    {        $remove = null;        if ($this->hasRemove()) {            /** @var AbstractContentRemove $remove */            $remove = new $this->removeClass($dataId);            //$remove->contentType = $this;        } else {            (new LogMessage())->writeError('No Admin Class. Class: ' . $this->getClassName());        }        return $remove;    }    protected function hasProperty($class)    {        $value = false;        if ($class !== null) {            $value = true;        }        return $value;    }}