<?phpnamespace Nemundo\Content\Type;use Nemundo\Content\Data\ContentView\ContentViewReader;use Nemundo\Content\View\AbstractContentView;use Nemundo\Html\Container\AbstractContainer;trait ViewTrait{    /**     * @var string[]     */    protected $viewClassList = [];    // hasDefaultView    public function hasView()    {        $value = false;        /*if ($this->viewClassList[]  !== null) {            $value = true;        }*/        if (sizeof($this->viewClassList) > 0) {            $value = true;        }        return $value;    }    public function getDefaultView(AbstractContainer $parent = null)    {        $view = null;        $reader = new ContentViewReader();        $reader->filter->andEqual($reader->model->contentTypeId, $this->typeId);        $reader->filter->andEqual($reader->model->defaultView, true);        $reader->limit = 1;        foreach ($reader->getData() as $viewRow) {            //$viewClass = $viewRow->viewClass;            /** @var AbstractContentView $view */            $view = new $viewRow->viewClass($parent);            $view->contentType = $this;        }        /*        if (isset($this->viewClassList[0])) {            /** @var AbstractContentView $view */        /*    $view = new $this->viewClassList[0]($parent);            $view->contentType = $this;        }*/        /*else {            /** @var AbstractContentView $view */        /*    $view = null;            if ($this->hasView()) {                /** @var AbstractContentView $view */        /*        $view = new $this->viewClass($parent);                $view->contentType = $this;            } else {                $view = new Paragraph($parent);                $view->content = '[No View]';            }        }*/        return $view;    }    public function getDefaultViewId()    {        $viewId = null;        $reader = new ContentViewReader();        $reader->filter->andEqual($reader->model->contentTypeId, $this->typeId);        $reader->filter->andEqual($reader->model->defaultView, true);        $reader->limit = 1;        foreach ($reader->getData() as $viewRow) {            $viewId = $viewRow->id;        }        if ($viewId == null) {            $reader = new ContentViewReader();            $reader->filter->andEqual($reader->model->contentTypeId, $this->typeId);            $reader->limit = 1;            foreach ($reader->getData() as $viewRow) {                $viewId = $viewRow->id;            }        }        return $viewId;    }    public function getView($viewId, AbstractContainer $parent = null)    {        $viewRow = (new ContentViewReader())->getRowById($viewId);        $class = $viewRow->viewClass;        /** @var AbstractContentView $view */        $view = new $class($parent);        $view->contentType = $this;        return $view;    }    // getViewLisitng    public function getViewList()    {        /** @var AbstractContentView[] $list */        $list = [];        foreach ($this->viewClassList as $viewClass) {            /** @var AbstractContentView $view */            $view = new $viewClass();            $view->contentType = $this;            $list[] = $view;        }        return $list;    }}