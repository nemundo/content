<?phpnamespace Nemundo\Content\Type;use Nemundo\Content\Form\AbstractContentForm;use Nemundo\Content\Form\AbstractContentFormPart;use Nemundo\Html\Container\AbstractContainer;// ContentFormTraittrait FormTrait{    /**     * @var string[]     */    protected $formClassList = [];    /**     * @var string[]     */    protected $formSearchClassList = [];    public function hasForm()    {        $value = false;        /*if ($this->formClass !== null) {            $value = true;        }*/        if (isset($this->formClassList[0])) {            $value = true;        }        return $value;    }    public function getDefaultForm(AbstractContainer $parent = null)    {        $form = null;        if (isset($this->formClassList[0])) {            /** @var AbstractContentForm $form */            $form = new $this->formClassList[0]($parent);            $form->contentType = $this;        } else {            /*if ($this->formClassList[] == null) {                (new LogMessage())->writeError('No Form' . $this->getClassName());            }*/            if ($this->hasForm()) {                /** @var AbstractContentForm $form */                $form = new $this->formClass($parent);                $form->contentType = $this;            }        }        return $form;    }    public function getFormList()    {        /** @var AbstractContentForm[] $list */        $list = [];        foreach ($this->formClassList as $formClass) {            /** @var AbstractContentForm $form */            $form = new $formClass();            $form->contentType = $this;            $list[] = $form;        }        if (sizeof($list) == 0) {            $list[] = $this->getDefaultForm();        }        return $list;    }}